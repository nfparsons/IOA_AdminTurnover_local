---
title: "Oregon Community-Based Care Administrative Turnover Study"
format: 
  html: default
  docx: 
    toc: false
    number-sections: false
editor: source
execute: 
  echo: false
  warning: false
  error: false
always_allow_html: true
---

```{r}
#| label: packages

if (!require("pacman")) 
  install.packages("pacman", repos = "https://cran.rstudio.org")

p_load(
  here, 
  conflicted,
  skimr, 
  janitor, 
  scales, 
  labelled, 
  showtext, 
  RStata, 
  lubridate, 
  mice,
  lavaan,
  psych,
  tidyverse, 
  tidymodels,
  haven, 
  readxl
)

p_load_gh(
  "dr-JT/datawrangling"
)

options("RStata.StataPath" = "/Applications/Stata/StataSE.app/Contents/MacOS/stata-se")
options("RStata.StataVersion" = 17)

conflict_prefer_all("dplyr", quiet = TRUE)
```


```{r}
#| label: prep and save data
#| eval: false

## Generate the clean, labelled dataset and save it
## Only runs explicitly

rm(list = ls())

## Load survey data
data.survey <-
  read_dta("data/AdminTurnover_Survey_Data_012721_020221_USE_THIS.dta") |>
  select(
    order012621, firstname, lastname, Finished,
    Q1, Q2, starts_with("Q3_"), Q4, starts_with("Q5_"), starts_with("Q6_"),
    Q7, starts_with("Q8_"), starts_with("Q9_"), Q10a, Q11, Q12, 
    starts_with("Q13_"), Q14, starts_with("Q15_"), Q16, Q17, 
    starts_with("Q18_"), starts_with("Q19_"), starts_with("Q20_"), Q21,
    starts_with("Q22_"), Q23, Q24, Q25, starts_with("Q26_"), resp, CCMU,
    catcap, anymc, county, opendate, medi, rural, nonpro
  ) |>
  select(-ends_with("_TEXT")) |>
  clean_names() |>
  mutate(across(everything(), ~ str_trim(.)),
         across(everything(), ~ tolower(.))) |>
  na_if(-99) |>
  filter(!is.na(finished)) |>
  mutate(
    opendate = as_date(opendate),
    across(starts_with("q3_"), ~ replace(., is.na(.), 0)),
    across(starts_with("q5_"), ~ replace(., is.na(.), 0)),
    across(starts_with("q6_"), ~ replace(., is.na(.), 0)), 
    across(starts_with("q15_"), ~ replace(., is.na(.), 0)), 
    across(starts_with("q22_"), ~ replace(., is.na(.), 0))
  ) |> 
  bind_rows(
    read_dta("data/AdminTurnover_Survey_Data_012721_020221_USE_THIS.dta") |>
      select(
        order012621, firstname, lastname, Finished,
        Q1, Q2, starts_with("Q3_"), Q4, starts_with("Q5_"), starts_with("Q6_"),
        Q7, starts_with("Q8_"), starts_with("Q9_"), Q10a, Q11, Q12, 
        starts_with("Q13_"), Q14, starts_with("Q15_"), Q16, Q17, 
        starts_with("Q18_"), starts_with("Q19_"), starts_with("Q20_"), Q21,
        starts_with("Q22_"), Q23, Q24, Q25, starts_with("Q26_"), resp, CCMU,
        catcap, anymc, county, opendate, medi, rural, nonpro
        ) |>
      select(-ends_with("_TEXT")) |>
      clean_names() |>
      mutate(across(everything(), ~ str_trim(.)),
             across(everything(), ~ tolower(.))) |>
      na_if(-99) |>
      filter(is.na(finished)) |>
      mutate(
        opendate = as_date(opendate)
      )
  ) |> 
  mutate(across(starts_with("q"), ~ as.numeric(.)))

## Admin turnover data
data.adturn <- 
  read_excel(here("data", "AdTurn List 021622.xlsx")) |>
      ## clean up variable names
      clean_names() |> 
      rename_all(tolower) |> 
      ## reformat name strings
      mutate(
        across(everything(), ~str_trim(.)), 
        across(everything(), ~tolower(.))
      ) |> 
      ## remove no_admin_record = 'exclude'
      filter(is.na(no_admin_record)) |> 
  select(ccmu1, firstname, lastname, check1, started, ended_100121)

  
## load Facility turnover data
data.facility <- 
  read_excel(here("data", "CBC Administrator List 01010-062519_032720_021522.xlsx")) |> 
      ## clean up variable names
      clean_names() |> 
      rename_all(tolower) |> 
      ## reformat name strings
      mutate(
        across(everything(), ~str_trim(.)), 
        across(everything(), ~tolower(.))
      ) |> 
      left_join(
        read_excel(here("data", "CBC Administrator List 01010-062519_032720_021522.xlsx")) |> 
          ## clean up variable names
          clean_names() |> 
          rename_all(tolower) |>
          ## reformat name strings
          mutate(
            across(everything(), ~str_trim(.)), 
            across(everything(), ~tolower(.))
          ) |>
          ## calculate the turnover ratio
          group_by(facid) |> 
          summarize(facility_n = n(), 
                  early = min(started)) |> 
          ungroup() |> 
          mutate(start_year = lubridate::year(lubridate::ymd(early)), 
                end_year = 2021, 
                span = end_year - start_year, 
                turnover_ratio = facility_n / span), 
        by = ("facid")
        ) |> 
  select(facid, admfirst, admlast, start_year, end_year, span, turnover_ratio)

data <- data.survey |> 
  left_join(data.adturn, 
            by = c("ccmu" = "ccmu1", 
                   "firstname" = "firstname", 
                   "lastname" = "lastname")
            ) |> 
  left_join(data.facility, 
            by = c("ccmu" = "facid", 
                   "firstname" = "admfirst", 
                   "lastname" = "admlast")
            ) |> 
  distinct() |> 
  rename(id = order012621, 
         fac_opendate = opendate, 
         employee_start = started, 
         employee_left = ended_100121, 
         fac_openyear = start_year, 
         fac_closeyear = end_year) |> 
  mutate(
    quit = case_when(!is.na(employee_left) ~ 1,
                     TRUE ~ 0),
    turnover_ratio = case_when(
      turnover_ratio <= .25 ~ 1, 
      turnover_ratio > .25 & turnover_ratio <= .50 ~ 2, 
      turnover_ratio > .50 & turnover_ratio <= .75 ~ 3, 
      turnover_ratio > .75 & turnover_ratio <= 1.0 ~ 4, 
      turnover_ratio > 1.0 ~ 5, 
      TRUE ~ NA_real_
    ),
    across(c(anymc, medi, nonpro, finished, resp), ~ as.numeric(.)), 
    catcap = case_when(
      catcap == 0 ~ 1,
      catcap == 1 ~ 2,
      catcap == 2 ~ 3,
      catcap == 3 ~ 4,
      TRUE ~ NA_real_
    ),
    rural = case_when(
      rural == 0 ~ 1, 
      rural == 1 ~ 2, 
      rural == 2 ~ 3, 
      TRUE ~ NA_real_
      ), 
    q2 = case_when(
      q2 < 20 ~ 1,
      q2 >= 20 & q2 < 30 ~ 2,
      q2 >= 30 & q2 < 40 ~ 3,
      q2 >= 40 & q2 < 50 ~ 4,
      q2 >= 50 & q2 < 60 ~ 5,
      q2 >= 60 & q2 < 70 ~ 6,
      q2 >= 70 ~ 7, 
      TRUE ~ NA_real_
    ),
    q3a = case_when(
      q3_1 == 1 & q3_2 == 0 & q3_3 == 0 & q3_5 == 0 & q3_6 == 0 & q3_7 == 0 ~ 1, 
      q3_1 == 0 & q3_2 == 1 & q3_3 == 0 & q3_5 == 0 & q3_6 == 0 & q3_7 == 0 ~ 2, 
      q3_1 == 0 & q3_2 == 0 & q3_3 == 1 & q3_5 == 0 & q3_6 == 0 & q3_7 == 0 ~ 3, 
      q3_1 == 0 & q3_2 == 0 & q3_3 == 0 & q3_5 == 1 & q3_6 == 0 & q3_7 == 0 ~ 4, 
      q3_1 == 0 & q3_2 == 0 & q3_3 == 0 & q3_5 == 0 & q3_6 == 1 & q3_7 == 0 ~ 5, 
      q3_1 == 0 & q3_2 == 0 & q3_3 == 0 & q3_5 == 0 & q3_6 == 0 & q3_7 == 1 ~ 6, 
      q3_1 == 0 & q3_2 == 0 & q3_3 == 0 & q3_5 == 0 & q3_6 == 0 & q3_7 == 0 ~ NA_real_,
      TRUE ~ 7
    ), 
    q3b = case_when(
      q3_4 == 1 ~ 1, 
      TRUE ~ 0
    ),
    q7 = case_when(
      q7 == 1 ~ 4, 
      q7 == 2 ~ 3, 
      q7 == 3 ~ 2, 
      q7 == 4 ~ 1, 
      TRUE ~ NA_real_
      ), 
    q10a = case_when(
      q10a == 2 ~ 0, 
      q10a == 1 ~ 1, 
      TRUE ~ NA_real_
      ), 
    q11 = case_when(
      q11 == 20192020 ~ 2, 
      q11 == 2017 ~ 3, 
      q11 < 1 ~ 1, 
      q11 >= 1 & q11 < 2 ~ 2, 
      q11 >= 2 & q11 < 5 ~ 3, 
      q11 > 5 ~ 4,
      TRUE ~ NA_real_
      ), 
    q12 = case_when(
      q12 == 1 ~ 1, 
      q12 == 2 ~ 0, 
      TRUE ~ NA_real_
      ), 
    q13 = case_when(
      q13_1 == 1 & is.na(q13_2) ~ 1, ## Assisted Living
      q13_2 == 1 & is.na(q13_1) ~ 2, ## Memory Care
      q13_1 == 1 & q13_2 == 1 ~ 3, ## Assisted Living and Memory Care
      q13_3 == 1 ~ 4, ## No, first community
      TRUE ~ NA_real_
    ), 
    q16 = case_when(
      q16 < 9.5 ~ 1, 
      q16 >= 9.5 & q16 < 15 ~ 2, 
      q16 >= 15 & q16 < 22 ~ 3, 
      q16 >= 22 ~ 4, 
      TRUE ~ NA_real_
    ),
    across(starts_with("q18_"), ~ replace(., . == 2, 0)), 
    across(starts_with("q18_"), ~ replace(., . == 3, NA)), 
    across(starts_with("q19_"), ~ replace(., . == 6, 0)), 
    q21 = case_when(q21 == 2 ~ 0, 
                    TRUE ~ q21),
    q23 = case_when(q23 == 5 ~ 1,
                          q23 == 4 ~ 2,
                          q23 == 3 ~ 3,
                          q23 == 2 ~ 4,
                          q23 == 1 ~ 5,
                          TRUE ~ NA_real_),
    
    q24 = case_when(q24 == 5 ~ 1,
                          q24 == 4 ~ 2,
                          q24 == 3 ~ 3,
                          q24 == 2 ~ 4,
                          q24 == 1 ~ 5,
                          TRUE ~ NA_real_),
    
    q25 = case_when(q25 == 5 ~ 1,
                          q25 == 4 ~ 2,
                          q25 == 3 ~ 3,
                          q25 == 2 ~ 4,
                          q25 == 1 ~ 5,
                          TRUE ~ NA_real_)
  ) |> 
  select(id, firstname, lastname, employee_start, employee_left, quit,
         ccmu, county, fac_opendate, fac_openyear, fac_closeyear, span, 
         turnover_ratio, catcap, anymc, medi, rural, nonpro, 
         quit, finished, resp, q1, q2, q3a, q3b, q4, 
         starts_with("q5_"), starts_with("q6_"), q7, starts_with("q8_"), 
         starts_with("q9_"), q10a, q11, q12, q13, q14, starts_with("q15"), 
         q16, q17, starts_with("q18"), starts_with("q19"), starts_with("q20"), 
         q21, starts_with("q22"), q23, q24, q25, starts_with("q26"), 
         everything()
         ) |> 
  select(-q3_1, -q3_2, -q3_3, -q3_4, -q3_5, -q3_6, -q3_7, 
         -q13_1, -q13_2, -q13_3)

## write data
write_dta(data, here("data", "adturn.dta"))

rm(list = ls())

################################################################################
#####  Stop here. Generate data labels for Stata users via the             #####
#####  adTurn_label.do file and save from Stata.                           #####
################################################################################
```


```{r}
#| label: load and prep data for use in R
#| eval: false

rm(list = ls())

data <- read_dta(here("data", "adturn.dta")) |> 
  ## filter to only respondents
  filter(finished == 1) |> 
  ## remove extraneous variables
  select(-id, -firstname, -lastname, -employee_start, -employee_left, 
         -ccmu, -county, -fac_opendate, -fac_openyear, -fac_closeyear, -span, 
         -finished, -resp, -check1, -y) |> 
  ## chuck variable labels
  remove_val_labels()

## Impute missing values
temp_data <- mice(data, m = 5, maxit = 5, meth = 'pmm', seed = 13)
## 75 imputed data points

data <- complete(temp_data, 1)

write_csv(data, here("data", "adTurn.csv"))

save.image(file = here("data", "adTurn.RData"))
```


```{r}
#| label: load workspace for analysis

load(here("data", "adturn.RData"))
```


# Marching orders

- ** double check (I)ntent (T)o (Q)uit
- EFA/CFA for subscales -> .4 arty cutoff (verify author factors) (give alphas for author's subscales as well as our bespoke subscales)
- ** write up results
- Two by table quit/no quit for demo/fac (chisq/t)
- Run subscale composite models independently
- (present exponentiated models, you slacker!)

--------------------------------------------------------------------------------

# Verify subscales

## Job Satisfaction - Job Diagnostic Survey (Q19)

Q19: 

  Satisfaction with security: q19_1, q19_11
  
  Satisfaction with compensation: q19_2, q19_9
  
  Growth satisfaction items: q19_3, q19_6, q19_10, q19_13
  
  "Social" satisfaction: q19_4, q19_7, q19_12
  
  "Supervisory" satisfaction: q19_5, q19_8, q19_14
  
### CFA of authors' subscales

```{r}
## https://sites.education.miami.edu/statsu/2020/10/12/steps-of-conducting-confirmatory-factor-analysis-cfa-in-r/

## define the model
q19.path <- '
s1 = ~ q19_1 + q19_11
s2 = ~ q19_2 + q19_9
s3 = ~ q19_3 + q19_10 + q19_13
s4 = ~ q19_4 + q19_7 + q19_12
s5 = ~ q19_5 + q19_8
'

## fit the model
q19.model <- cfa(q19.path, 
                 data = data)

modindices(q19.model, sort = TRUE, maximum.number=10)

## examine the model
summary(q19.model, fit.measures = TRUE)
```


### EFA of our data

```{r}
q19.cor <- data |> 
  select(starts_with("q19_")) |> 
  cor()

fa.parallel(q19.cor, n.obs = 193, fa = "both")
```

```{r}
## https://www.geo.fu-berlin.de/en/v/soga/Geodata-analysis/factor-analysis/A-simple-example-of-FA/index.html

q19.efa <- factanal(data |> select(starts_with("q19")), 
                    factors = 3, 
                    rotation = "promax")

q19.efa
```


## Organizational commitment, perceived organizational support, perceived job security, and intent to quit (Q20)

Q20: 

**Look at OC/POS/ITQ in own EFAs/CFAs**

  OC-Affective: q20_1, q20_3, q20_6
  
  POS-S: q20_2, q20_4, q20_8
  
  Perceived Job Security: q20_5, q20_10
  
  OC-Normative: q20_7, q20_9
  
  Intent to Quit: q20_11, q20_14, q20_15
  
  OC-Continuance: q20_12, q20_13

### CFA of authors' subscales

```{r}
## https://sites.education.miami.edu/statsu/2020/10/12/steps-of-conducting-confirmatory-factor-analysis-cfa-in-r/

## reverse code 'intent to quit' variables per iic
data.rc <- reverse.code(keys = c(1,1,1,1,1, 1,1,1,1,1, -1,1,1,-1,-1), 
               items = select(data, starts_with("q20"))) |> 
  as.tibble() |> 
  rename(q20_11 = `q20_11-`, q20_14 = `q20_14-`, q20_15 = `q20_15-`)

## define the model
q20.path <- '
s1 = ~ q20_1 + q20_3 + q20_6
s2 = ~ q20_2 + q20_4 + q20_8
s3 = ~ q20_5 + q20_10
s4 = ~ q20_7 + q20_9
s5 = ~ q20_11 + q20_14 + q20_15
s6 = ~ q20_12 + q20_13
'

## fit the model
q20.model <- cfa(q20.path, data = data.rc)

## examine the model
summary(q20.model, fit.measures = TRUE)
```

### EFA of our data

```{r}
q20.cor <-
  reverse.code(
    keys = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1, 1, 1, -1, -1),
    items = select(data, starts_with("q20"))
  ) |>
  as.tibble() |>
  rename(q20_11 = `q20_11-`,
         q20_14 = `q20_14-`,
         q20_15 = `q20_15-`) |>
  cor()

fa.parallel(q20.cor, n.obs = 193, fa = "both")
```

```{r}
## https://www.geo.fu-berlin.de/en/v/soga/Geodata-analysis/factor-analysis/A-simple-example-of-FA/index.html

q20.efa <- factanal(
  reverse.code(
    keys = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1, 1, 1, -1, -1),
    items = select(data, starts_with("q20"))
  ) |>
    as.tibble() |>
    rename(
      q20_11 = `q20_11-`,
      q20_14 = `q20_14-`,
      q20_15 = `q20_15-`
    ),
  factors = 1,
  rotation = "promax"
)

q20.efa
```


## Job Stress Scale (Q26)

Q26: 

  Time Stress: q26_1, q26_2, q26_3, q26_4, q26_5
  
  Anxiety: q26_6, q26_7, q26_8, q26_9, q26_10

### CFA of authors' subscales  

```{r}
## https://sites.education.miami.edu/statsu/2020/10/12/steps-of-conducting-confirmatory-factor-analysis-cfa-in-r/

## define the model
q26.path <- '
s1 = ~ q26_1 + q26_2
s2 = ~ q26_3 + q26_4 + q26_5
s3 = ~ q26_6 + q26_7 + q26_8 + q26_9 + q26_10
'

## fit the model
q26.model <- cfa(q26.path, data = data)

## examine the model
summary(q26.model, fit.measures = TRUE)

modindices(q26.model, sort = TRUE, maximum.number=10)
```

We estimated a CFA with authors' preferred model. Here are the CFI/RSEA. EFA showed one factor model showed fit fine.

### EFA of our data

**Use this as one big scale**

```{r}
q26.cor <-
  data |> 
  select(starts_with("q26_")) |> 
  cor()

fa.parallel(q26.cor, n.obs = 193, fa = "both")
```

```{r}
## https://www.geo.fu-berlin.de/en/v/soga/Geodata-analysis/factor-analysis/A-simple-example-of-FA/index.html

q26.efa <- factanal(data |> select(starts_with("q26")), 
                    factors = 1, 
                    rotation = "promax")

q26.efa
```

--------------------------------------------------------------------------------

# Calculate subscale alphas

### Q19 (author): 

  Satisfaction with security: q19_1, q19_11

```{r}
stata('alpha q19_1 q19_11, std item', data.in = data)
```
  
  Satisfaction with compensation: q19_2, q19_9
  
```{r}
stata('alpha q19_2 q19_9, std item', data.in = data)
```
  
  Growth satisfaction items: q19_3, q19_6, q19_10, q19_13
  
```{r}
stata('alpha q19_3 q19_6 q19_10 q19_13, std item', data.in = data)
```
  
  "Social" satisfaction: q19_4, q19_7, q19_12
  
```{r}
stata('alpha q19_4 q19_7 q19_12, std item', data.in = data)
```
  
  "Supervisory" satisfaction: q19_5, q19_8, q19_14
  
```{r}
stata('alpha q19_5 q19_8 q19_14, std item', data.in = data)
```

### Q19 (ours): 

  Factor1: q19_1, q19_2, q19_3, q19_9, q19_10, q19_11
  
```{r}
stata('alpha q19_1 q19_2 q19_3 q19_9 q19_10 q19_11, std item', data.in = data)
```

  Factor2: q19_4, q19_6, q19_7, q19_12, q19_13
  
```{r}
stata('alpha q19_4 q19_6 q19_7 q19_12 q19_13, std item', data.in = data)
```

  Factor3: q19_5, q19_8, q19_14
  
```{r}
stata('alpha q19_5 q19_8 q19_14, std item', data.in = data)
```

### Q20 (author): 

  OC-Affective: q20_1, q20_3, q20_6

```{r}
stata('alpha q20_1 q20_3 q20_6, std item', data.in = data)
```

  POS-S: q20_2, q20_4, q20_8

```{r}
stata('alpha q20_2 q20_4 q20_8, std item', data.in = data)
```

  Perceived Job Security: q20_5, q20_10

```{r}
stata('alpha q20_5 q20_10, std item', data.in = data)
```

  OC-Normative: q20_7, q20_9

```{r}
stata('alpha q20_7 q20_9, std item', data.in = data)
```

  Intent to Quit: q20_11, q20_14, q20_15

```{r}
stata('alpha q20_11 q20_14 q20_15, std item', data.in = data)
```

  OC-Continuance: q20_12, q20_13

```{r}
stata('alpha q20_12 q20_13, std item', data.in = data)
```


### Q20 (ours):

  Factor1: q20_1, q20_2, q20_3, q20_4, q20_5, q20_6, q20_8, q20_9, q20_10

```{r}
stata('alpha q20_1 q20_2 q20_3 q20_4 q20_5 q20_6 q20_8 q20_9 q20_10, std item', data.in = data)
```

  Factor2: q20_11, q20_14, q20_15

```{r}
stata('alpha q20_11 q20_14 q20_15, std item', data.in = data)
```

  Factor3: q20_7, q20_12, q20_13

```{r}
stata('alpha q20_7 q20_12 q20_13, std item', data.in = data)
```


### Q26 (author): 

  Time Stress: q26_1, q26_2, q26_3, q26_4, q26_5
  
```{r}
stata('alpha q26_1 q26_2 q26_3 q26_4 q26_5, std item', data.in = data)
```
  
  Anxiety: q26_6, q26_7, q26_8, q26_9, q26_10
  
```{r}
stata('alpha q26_6 q26_7 q26_8 q26_9 q26_10, std item', data.in = data)
```
  
### Q26 (ours): 

  Factor1: q26_4, q26_5, q26_6, q26_7, q26_8, q26_9, q26_10
  
```{r}
stata('alpha q26_4 q26_5 q26_6 q26_7 q26_8 q26_9 q26_10, std item', data.in = data)
```
  
  Factor2: q26_1, q26_2, q26_3
  
```{r}
stata('alpha q26_1 q26_2 q26_3, std item', data.in = data)
```
  

```{r}
stata('proportion turnover_ratio i.catcap i.anymc i.medi i.rural i.nonpro i.q1 i.q2 i.q3a i.q3b i.q4, over(quit)', data.in = data)
```



























